knitr::opts_chunk$set(echo = TRUE)
#install.packages("ggplot2")
#install.packages("dplyr")
#
library(ggplot2)
library(dplyr)
knitr::opts_chunk$set(echo = TRUE)
#install.packages("ggplot2")
#install.packages("dplyr")
#
library(ggplot2)
library(dplyr)
#setwd("/Users/benjaminolivavazquez/Documents/Personal/Cursos_UNAM/SERIES_2021-I/Series-de-Tiempo-Fall2020/Clase_2")
getwd()
#-> rnorm
args(rnorm)
# Supongamos E[U_t] = 0 y Var[U_t] = 4
rnorm(10, mean = 0, sd = 2)
Z_t <- rnorm(1000, mean = 0, sd = 2)
mean(Z_t)
sd(Z_t)
hist(Z_t,
main = "Histograma del proceso Z_t, Normal(0, 2)",
xlab = "Z_t",
ylab = "Frecuencia")
set.seed(10101) # Es una constate (la semilla) que fija la serie de numeros aleatorios
Z_t <- rnorm(1000, mean = 0, sd = 2)
mean(Z_t)
sd(Z_t)
hist(Z_t,
main = "Histograma del proceso Z_t, Normal(0, 2)",
xlab = "Z_t",
ylab = "Frecuencia")
#-> rnorm
args(rnorm)
# Supongamos E[U_t] = 0 y Var[U_t] = 4
rnorm(10, mean = 0, sd = 2)
set.seed(10101) # Es una constate (la semilla) que fija la serie de numeros aleatorios
Z_t <- rnorm(1000, mean = 0, sd = 2)
mean(Z_t)
sd(Z_t)
hist(Z_t,
main = "Histograma del proceso Z_t, Normal(0, 2)",
xlab = "Z_t",
ylab = "Frecuencia")
png("G_Z_t.jpg",  width = 900)
hist(Z_t,
main = "Histograma del proceso Z_t, Normal(0, 2)",
xlab = "Z_t",
ylab = "Frecuencia")
dev.off()
Moneda <- function(R, Time){
# R: es el conjunto del cual se extrae la muestra - espacio muestral
# Time: es el tamaño de la serie resultante
U_t <- replicate(Time,
sample(R, size = 1, replace = TRUE) )
# Esta es una funcion que genera un vector de resultados aleatorios de los posibles en
# el espacio muestral, tomando muestras de tamaño 1
return(U_t)
}
Resultados <- c(-1, 1)
#
Periodos <- 10000
# Creamos un data frame de nombre "U" con una columna llamada "Tiempo"
U <- data.frame(Tiempo = c(1:Periodos))
# Agregamos al data frame una columna "U_t" utilizando nuestra función de lanzamiento de
# una moneda
U$U_t <- Moneda( Resultados, Periodos )
#
mu = mean(U$U_t)
mu
#
S2 = var(U$U_t)
S2
# Agregamos al data frame una columna SU_t que llenamos de ceros (0)
U$SU_t <- replicate(Periodos, 0)
View(U)
for(i in 1:Periodos){
U$SU_t[i] <- sum( U$U_t[1:i] )
}
View(U)
ggplot(data = U, aes( x = Tiempo, y = SU_t) ) +
geom_line(size = 0.5, color = "darkblue") +
#geom_point(size = 1.0, color = "darkblue") +
#theme_bw() +
theme(legend.position = "none") +
theme(legend.title = element_blank()) +
guides(col = guide_legend(nrow = 1, byrow = TRUE)) +
xlab("Tiempo") +
ylab("Xt") +
theme(plot.title = element_text(size = 11, face = "bold", hjust = 0)) +
theme(plot.subtitle = element_text(size = 10, hjust = 0)) +
theme(plot.caption = element_text(size = 10, hjust = 0)) +
theme(plot.margin = unit(c(1,1,1,1), "cm")) +
labs(
title = "Gráfica de la serie de tiempo Xt",
subtitle = "Valores en pesos",
caption = "Fuente: Elaboración propia. \nNotas: Simulación del lanzamiento de una moneda."
)
ggsave("Lanzamiento_Moneda.png", width = 30, height = 15, units = "cm")
#
source("Caminata.R")
# Definimos argumentos de la función
Opciones <- c(-1, 1)
#
Soporte <- 10000
# Vamos a réplicar el proceso con estos parámetros
Rango <- 200
#
Caminos <- 10
#
for(i in 1:Caminos){
TT <- data.matrix(data.frame(Caminata(Opciones, Soporte)[1]))
#
G_t <- data.matrix(data.frame(Caminata(Opciones, Soporte)[2]))
#
plot(TT, G_t, col = "blue", type = "l", ylab = "Ganancias", xlab = "Tiempo", ylim = c(-Rango,Rango))
#
par(new = TRUE)
#
i <- i +1
}
#
par(new = FALSE)
install.packages(XQuartz)
install.packages('shiny')
#install.packages('shiny')
knitr::opts_chunk$set(echo = TRUE)
source("Caminata.R")
knitr::opts_chunk$set(echo = TRUE)
#install.packages("ggplot2")
#install.packages("dplyr")
#install.packages("readxl")
#
library(ggplot2)
library(dplyr)
library(readxl)
Datos <- read_excel("Base_Transporte.xlsx", sheet = "Datos", col_names = TRUE)
head(Datos)
View(Datos)
names(Datos)
tail(Datos)
str(Datos)
dim(Datos)
Datos[ , 2]
Datos[5 , ]
Datos[c(2:259) , 2]
Datos[ , c(2:6)]
Datos[ , c(2, 3, 4, 5, 6)]
Datos[c("Pax_Nal", "Pax_Int", "Vue_Nal", "Vue_Int")]
summary( Datos[ ,c(2:6)] )
Resumen1 <- summary(Datos[ ,c(2:6)])
Resumen1
Pax_Metro <- ts(Datos$Pax_Metro,
start = 2000,
freq = 12)
Dat_Aereo <- ts(Datos[c("Pax_Nal", "Pax_Int", "Vue_Nal", "Vue_Int")],
start = 2000,
freq = 12)
plot(Pax_Metro,
col = "darkblue",
xlab = "Tiempo",
type = "l", lwd = 2,
ylab = "Millones de personas",
main = "Pasajeros Transportados en el Metro de la CDMX \n(Ene-2000 a Jul-2021)",
sub = "Fuente: Elaboración propia con información del INEGI")
ggplot(data = Datos, aes(x = Periodo, y = Pax_Metro)) +
geom_line(size = 0.5, color = "darkblue") +
#geom_point(size = 1.0, color = "darkblue") +
#theme_bw() +
xlab("Tiempo") +
ylab("Millones de pasajeros") +
theme(plot.title = element_text(size = 11, face = "bold", hjust = 0)) +
theme(plot.subtitle = element_text(size = 10, hjust = 0)) +
theme(plot.caption = element_text(size = 10, hjust = 0)) +
theme(plot.margin = unit(c(1,1,1,1), "cm")) +
labs(
title = "Pasajeros Transportados en el Metro de la CDMX",
subtitle = "(Ene-2000 a Jul-2021)",
caption = "Fuente: Elaboración propia con información del INEGI, \nhttps://www.inegi.org.mx/app/indicadores/?tm=0&t=1090"
)
#
ggsave("Pax_Metro.png", width = 20, height = 15, units = "cm")
View(Datos)
Datos <- read_excel("Base_Transporte.xlsx", sheet = "Datos", col_names = TRUE)
head(Datos)
knitr::opts_chunk$set(echo = TRUE)
#install.packages("ggplot2")
#install.packages("dplyr")
#install.packages("readxl")
#
library(ggplot2)
library(dplyr)
library(readxl)
Datos <- read_excel("Base_Transporte.xlsx", sheet = "Datos", col_names = TRUE)
head(Datos)
summary( Datos[ ,c(2:6)] )
Resumen1 <- summary(Datos[ ,c(2:6)])
Resumen1
summary( Datos[ ,c(2:6)] )
Resumen1 <- summary(Datos[ ,c(2:6)])
Resumen1
Pax_Metro <- ts(Datos$Pax_Metro,
start = 2000,
freq = 12)
Dat_Aereo <- ts(Datos[c("Pax_Nal", "Pax_Int", "Vue_Nal", "Vue_Int")],
start = 2000,
freq = 12)
plot(Pax_Metro,
col = "darkblue",
xlab = "Tiempo",
type = "l", lwd = 2,
ylab = "Millones de personas",
main = "Pasajeros Transportados en el Metro de la CDMX \n(Ene-2000 a Jul-2021)",
sub = "Fuente: Elaboración propia con información del INEGI")
ggplot(data = Datos, aes(x = Periodo, y = Pax_Metro)) +
geom_line(size = 0.5, color = "darkblue") +
#geom_point(size = 1.0, color = "darkblue") +
#theme_bw() +
xlab("Tiempo") +
ylab("Millones de pasajeros") +
theme(plot.title = element_text(size = 11, face = "bold", hjust = 0)) +
theme(plot.subtitle = element_text(size = 10, hjust = 0)) +
theme(plot.caption = element_text(size = 10, hjust = 0)) +
theme(plot.margin = unit(c(1,1,1,1), "cm")) +
labs(
title = "Pasajeros Transportados en el Metro de la CDMX",
subtitle = "(Ene-2000 a Jul-2021)",
caption = "Fuente: Elaboración propia con información del INEGI, \nhttps://www.inegi.org.mx/app/indicadores/?tm=0&t=1090"
)
#
ggsave("Pax_Metro.png", width = 20, height = 15, units = "cm")
ggplot(data = Datos, aes(x = Periodo)) +
geom_line(aes(y = Pax_Nal, color = "Pax_Nal")) +
geom_line(aes(y = Pax_Int, color = "Pax_Int")) +
scale_color_brewer(type = "qual", palette = 6) +
#theme_bw() +
theme(legend.position = "bottom") +
theme(legend.title = element_blank()) +
guides(col = guide_legend(nrow = 1, byrow = TRUE)) +
xlab("Tiempo") +
ylab("Pasajeros") +
theme(plot.title = element_text(size = 11, face = "bold", hjust = 0)) +
theme(plot.subtitle = element_text(size = 10, hjust = 0)) +
theme(plot.caption = element_text(size = 10, hjust = 0)) +
theme(plot.margin = unit(c(1,1,1,1), "cm")) +
labs(
title = "Pasajeros en vuelos nacionales e internacionales (Salidas)",
subtitle = "(Ene-2000 a Jun-2019)",
caption = "Fuente: Elaboración propia con información del INEGI, \n https://www.inegi.org.mx/app/indicadores/?tm=0&t=1090" )
Tabla_Pax_Metro <- data.frame(matrix(c("Media",
"Varianza",
"Covarianza (t, t - 1)",
"Covarianza (t, t - 2)",
"Covarianza (t, t - 3)",
"Autocorrelacion(1)",
"Autocorrelacion(2)",
"Autocorrelacion(3)",
"Q(1)",
"Q(3)*"),
nrow = 10,
ncol = 1) )
#
Tabla_Pax_Metro
names(Tabla_Pax_Metro)
names(Tabla_Pax_Metro) <- c("Estadística")
Tabla_Pax_Metro
Tabla_Pax_Metro$Valor <- 0
Tabla_Pax_Metro
Tabla_Pax_Metro[1, 2] <- round(mean(Pax_Metro), digits = 2)
Tabla_Pax_Metro[2, 2] <- round(var(Pax_Metro), digits = 2)
Tabla_Pax_Metro[3, 2] <- round(cov(Pax_Metro[2:234], Pax_Metro[1:233]), digits = 2)
Tabla_Pax_Metro[4, 2] <- round(cov(Pax_Metro[3:234], Pax_Metro[1:232]), digits = 2)
Tabla_Pax_Metro[5, 2] <- round(cov(Pax_Metro[4:234], Pax_Metro[1:231]), digits = 2)
Tabla_Pax_Metro[6, 2] <- round(Tabla_Pax_Metro[3, 2]/Tabla_Pax_Metro[2, 2], digits = 2)
Tabla_Pax_Metro[7, 2] <- round(Tabla_Pax_Metro[4, 2]/Tabla_Pax_Metro[2, 2], digits = 2)
Tabla_Pax_Metro[8, 2] <- round(Tabla_Pax_Metro[5, 2]/Tabla_Pax_Metro[2, 2], digits = 2)
Tabla_Pax_Metro[9, 2] <- round(234*(Tabla_Pax_Metro[6, 2]^2), digits = 2)
Tabla_Pax_Metro[10, 2] <- round(234*(Tabla_Pax_Metro[6, 2]^2 +
Tabla_Pax_Metro[7, 2]^2 +
Tabla_Pax_Metro[8, 2]^2), digits = 2)
#
Tabla_Pax_Metro
acf(Pax_Metro,
lag.max = 150,
xlab = 'Resagos k en meses',
main="Funcion de Autocorrelación del número de pasajeros del metro")
Box.test(Pax_Metro, lag = 1)
